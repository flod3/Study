{"ast":null,"code":"import _classCallCheck from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/jucheng/FrontProject/Study/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/jucheng/FrontProject/Study/src/page/base/editor.jsx\";\nimport React, { Component } from 'react';\nimport { Frame } from 'component/frame.jsx';\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport { Editor, EditorState, RichUtils } from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport './editor.css';\nvar customHistory = createBrowserHistory(); // Custom overrides for \"code\" style.\n\nvar styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  }\n};\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote':\n      return 'RichEditor-blockquote';\n\n    default:\n      return null;\n  }\n}\n\nvar app =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(app, _Component);\n\n  function app(props) {\n    var _this;\n\n    _classCallCheck(this, app);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(app).call(this, props));\n    _this.state = {\n      editorState: EditorState.createEmpty()\n    };\n\n    _this.focus = function () {\n      return _this.editor.focus();\n    };\n\n    _this.onChange = function (editorState) {\n      return _this.setState({\n        editorState: editorState\n      });\n    };\n\n    _this.handleKeyCommand = _this._handleKeyCommand.bind(_assertThisInitialized(_this));\n    _this.onTab = _this._onTab.bind(_assertThisInitialized(_this));\n    _this.toggleBlockType = _this._toggleBlockType.bind(_assertThisInitialized(_this));\n    _this.toggleInlineStyle = _this._toggleInlineStyle.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(app, [{\n    key: \"_handleKeyCommand\",\n    value: function _handleKeyCommand(command, editorState) {\n      var newState = RichUtils.handleKeyCommand(editorState, command);\n\n      if (newState) {\n        this.onChange(newState);\n        return true;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"_onTab\",\n    value: function _onTab(e) {\n      var maxDepth = 4;\n      this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n    }\n  }, {\n    key: \"_toggleBlockType\",\n    value: function _toggleBlockType(blockType) {\n      this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n    }\n  }, {\n    key: \"_toggleInlineStyle\",\n    value: function _toggleInlineStyle(inlineStyle) {\n      this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, inlineStyle));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var editorState = this.state.editorState; // If the user changes block type before entering any text, we can\n      // either style the placeholder or hide it. Let's just hide it now.\n\n      var className = 'RichEditor-editor';\n      var contentState = editorState.getCurrentContent();\n\n      if (!contentState.hasText()) {\n        if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n          className += ' RichEditor-hidePlaceholder';\n        }\n      }\n\n      return React.createElement(\"div\", {\n        className: \"RichEditor-root\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(BlockStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleBlockType,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), React.createElement(InlineStyleControls, {\n        editorState: editorState,\n        onToggle: this.toggleInlineStyle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: className,\n        onClick: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, React.createElement(Editor, {\n        blockStyleFn: getBlockStyle,\n        customStyleMap: styleMap,\n        editorState: editorState,\n        handleKeyCommand: this.handleKeyCommand,\n        onChange: this.onChange,\n        onTab: this.onTab,\n        placeholder: \"Tell a story...\" // ref=\"editor\"\n        ,\n        ref: function ref(c) {\n          _this2.editor = c;\n        },\n        spellCheck: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return app;\n}(Component);\n\nexport { app as default };\n\nvar StyleButton =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(StyleButton, _React$Component);\n\n  function StyleButton() {\n    var _this3;\n\n    _classCallCheck(this, StyleButton);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(StyleButton).call(this));\n\n    _this3.onToggle = function (e) {\n      e.preventDefault();\n\n      _this3.props.onToggle(_this3.props.style);\n    };\n\n    return _this3;\n  }\n\n  _createClass(StyleButton, [{\n    key: \"render\",\n    value: function render() {\n      var className = 'RichEditor-styleButton';\n\n      if (this.props.active) {\n        className += ' RichEditor-activeButton';\n      }\n\n      return React.createElement(\"span\", {\n        className: className,\n        onMouseDown: this.onToggle,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.props.label);\n    }\n  }]);\n\n  return StyleButton;\n}(React.Component);\n\nvar BLOCK_TYPES = [{\n  label: 'H1',\n  style: 'header-one'\n}, {\n  label: 'H2',\n  style: 'header-two'\n}, {\n  label: 'H3',\n  style: 'header-three'\n}, {\n  label: 'H4',\n  style: 'header-four'\n}, {\n  label: 'H5',\n  style: 'header-five'\n}, {\n  label: 'H6',\n  style: 'header-six'\n}, {\n  label: 'Blockquote',\n  style: 'blockquote'\n}, {\n  label: 'UL',\n  style: 'unordered-list-item'\n}, {\n  label: 'OL',\n  style: 'ordered-list-item'\n}, {\n  label: 'Code Block',\n  style: 'code-block'\n}];\n\nvar BlockStyleControls = function BlockStyleControls(props) {\n  var editorState = props.editorState;\n  var selection = editorState.getSelection();\n  var blockType = editorState.getCurrentContent().getBlockForKey(selection.getStartKey()).getType();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, React.createElement(Frame, {\n    history: customHistory,\n    defaultOpenKey: \"datas\",\n    defaultSelectedKey: \"person\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"home_content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, BLOCK_TYPES.map(function (type) {\n    return React.createElement(StyleButton, {\n      key: type.label,\n      active: type.style === blockType,\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    });\n  })));\n};\n\nvar INLINE_STYLES = [{\n  label: 'Bold',\n  style: 'BOLD'\n}, {\n  label: 'Italic',\n  style: 'ITALIC'\n}, {\n  label: 'Underline',\n  style: 'UNDERLINE'\n}, {\n  label: 'Monospace',\n  style: 'CODE'\n}];\n\nvar InlineStyleControls = function InlineStyleControls(props) {\n  var currentStyle = props.editorState.getCurrentInlineStyle();\n  return React.createElement(\"div\", {\n    className: \"RichEditor-controls\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, INLINE_STYLES.map(function (type) {\n    return React.createElement(StyleButton, {\n      key: type.label,\n      active: currentStyle.has(type.style),\n      label: type.label,\n      onToggle: props.onToggle,\n      style: type.style,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    });\n  }));\n};","map":{"version":3,"sources":["/home/jucheng/FrontProject/Study/src/page/base/editor.jsx"],"names":["React","Component","Frame","createBrowserHistory","Editor","EditorState","RichUtils","customHistory","styleMap","CODE","backgroundColor","fontFamily","fontSize","padding","getBlockStyle","block","getType","app","props","state","editorState","createEmpty","focus","editor","onChange","setState","handleKeyCommand","_handleKeyCommand","bind","onTab","_onTab","toggleBlockType","_toggleBlockType","toggleInlineStyle","_toggleInlineStyle","command","newState","e","maxDepth","blockType","inlineStyle","className","contentState","getCurrentContent","hasText","getBlockMap","first","c","StyleButton","onToggle","preventDefault","style","active","label","BLOCK_TYPES","BlockStyleControls","selection","getSelection","getBlockForKey","getStartKey","map","type","INLINE_STYLES","InlineStyleControls","currentStyle","getCurrentInlineStyle","has"],"mappings":"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","sourcesContent":["\nimport React, { Component } from 'react'\nimport {Frame} from 'component/frame.jsx';\nimport createBrowserHistory from \"history/createBrowserHistory\";\nimport { Editor, EditorState, RichUtils } from 'draft-js'\nimport 'draft-js/dist/Draft.css'\nimport './editor.css';\n\nconst customHistory = createBrowserHistory();\n\n// Custom overrides for \"code\" style.\nconst styleMap = {\n  CODE: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n}\n\nfunction getBlockStyle(block) {\n  switch (block.getType()) {\n    case 'blockquote': return 'RichEditor-blockquote';\n    default: return null;\n  }\n}\n\n\nexport default class app extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { editorState: EditorState.createEmpty() };\n\n    this.focus = () => this.editor.focus()\n    this.onChange = editorState => this.setState({ editorState });\n\n    this.handleKeyCommand = this._handleKeyCommand.bind(this);\n    this.onTab = this._onTab.bind(this);\n    this.toggleBlockType = this._toggleBlockType.bind(this);\n    this.toggleInlineStyle = this._toggleInlineStyle.bind(this);\n  }\n\n  _handleKeyCommand(command, editorState) {\n    const newState = RichUtils.handleKeyCommand(editorState, command);\n    if (newState) {\n      this.onChange(newState);\n      return true;\n    }\n    return false;\n  }\n\n  _onTab(e) {\n    const maxDepth = 4;\n    this.onChange(RichUtils.onTab(e, this.state.editorState, maxDepth));\n  }\n\n  _toggleBlockType(blockType) {\n    this.onChange(RichUtils.toggleBlockType(\n      this.state.editorState,\n      blockType,\n    ));\n  }\n\n  _toggleInlineStyle(inlineStyle) {\n    this.onChange(RichUtils.toggleInlineStyle(\n      this.state.editorState,\n      inlineStyle,\n    ));\n  }\n\n  render() {\n    const { editorState } = this.state;\n\n    // If the user changes block type before entering any text, we can\n    // either style the placeholder or hide it. Let's just hide it now.\n    let className = 'RichEditor-editor';\n    const contentState = editorState.getCurrentContent();\n    if (!contentState.hasText()) {\n      if (contentState.getBlockMap().first().getType() !== 'unstyled') {\n        className += ' RichEditor-hidePlaceholder';\n      }\n    }\n\n    return (\n      <div className=\"RichEditor-root\">\n        <BlockStyleControls\n          editorState={editorState}\n          onToggle={this.toggleBlockType}\n        />\n        <InlineStyleControls\n          editorState={editorState}\n          onToggle={this.toggleInlineStyle}\n        />\n        <div className={className} onClick={this.focus}>\n          <Editor\n            blockStyleFn={getBlockStyle}\n            customStyleMap={styleMap}\n            editorState={editorState}\n            handleKeyCommand={this.handleKeyCommand}\n            onChange={this.onChange}\n            onTab={this.onTab}\n            placeholder=\"Tell a story...\"\n            // ref=\"editor\"\n            ref={(c) => { this.editor = c }}\n            spellCheck\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\n\nclass StyleButton extends React.Component {\n  constructor() {\n    super();\n    this.onToggle = (e) => {\n      e.preventDefault();\n      this.props.onToggle(this.props.style);\n    };\n  }\n\n  render() {\n    let className = 'RichEditor-styleButton';\n    if (this.props.active) {\n      className += ' RichEditor-activeButton';\n    }\n\n    return (\n      <span className={className} onMouseDown={this.onToggle}>\n        {this.props.label}\n      </span>\n    );\n  }\n}\n\nconst BLOCK_TYPES = [\n  { label: 'H1', style: 'header-one' },\n  { label: 'H2', style: 'header-two' },\n  { label: 'H3', style: 'header-three' },\n  { label: 'H4', style: 'header-four' },\n  { label: 'H5', style: 'header-five' },\n  { label: 'H6', style: 'header-six' },\n  { label: 'Blockquote', style: 'blockquote' },\n  { label: 'UL', style: 'unordered-list-item' },\n  { label: 'OL', style: 'ordered-list-item' },\n  { label: 'Code Block', style: 'code-block' },\n];\n\nconst BlockStyleControls = (props) => {\n  const { editorState } = props;\n  const selection = editorState.getSelection();\n  const blockType = editorState\n    .getCurrentContent()\n    .getBlockForKey(selection.getStartKey())\n    .getType();\n\n  return (\n      \n    <div className=\"RichEditor-controls\">\n     <Frame history={customHistory} defaultOpenKey=\"datas\" defaultSelectedKey=\"person\"/>\n          <div className=\"home_content\">\n      {BLOCK_TYPES.map(type =>\n        (<StyleButton\n          key={type.label}\n          active={type.style === blockType}\n          label={type.label}\n          onToggle={props.onToggle}\n          style={type.style}\n        />))}\n        </div>\n    </div>\n  );\n};\n\nconst INLINE_STYLES = [\n  { label: 'Bold', style: 'BOLD' },\n  { label: 'Italic', style: 'ITALIC' },\n  { label: 'Underline', style: 'UNDERLINE' },\n  { label: 'Monospace', style: 'CODE' },\n];\n\nconst InlineStyleControls = (props) => {\n  const currentStyle = props.editorState.getCurrentInlineStyle();\n  return (\n    <div className=\"RichEditor-controls\">\n        \n          {INLINE_STYLES.map(type =>\n           (<StyleButton\n             key={type.label}\n             active={currentStyle.has(type.style)}\n             label={type.label}\n             onToggle={props.onToggle}\n            style={type.style}\n        />))}\n      </div>\n  \n  );\n};\n"]},"metadata":{},"sourceType":"module"}